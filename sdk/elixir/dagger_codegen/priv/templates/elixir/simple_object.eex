<% alias Dagger.Codegen.ElixirGenerator.Formatter %>
<% alias Dagger.Codegen.ElixirGenerator.Renderer %>

# This file generated by `dagger_codegen`. Please DO NOT EDIT.
defmodule <%= Formatter.format_module(@type.name) %> do
  <%= Renderer.render_moduledoc(@type) %>

  @type t() :: %__MODULE__{
  <%= for field <- @type.fields do %>
    <%= field.name |> Formatter.format_var_name() %>: <%= Formatter.format_type(field.type) %>,
  <% end %>
  }

  @derive [
    {Nestru.PreDecoder, translate: %{
    <%= for field <- @type.fields do %>
      "<%= field.name %>" => <%= field.name |> Formatter.format_var_name() |> Renderer.render_atom() %>,
    <% end %>
    }},
    Nestru.Decoder
  ]
  defstruct [<%= Enum.map_join(@type.fields, ",", &(&1.name |> Formatter.format_var_name() |> Renderer.render_atom())) %>, :selection, :client]
end
