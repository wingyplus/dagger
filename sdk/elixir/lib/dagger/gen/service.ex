# This file generated by `mix dagger.gen`. Please DO NOT EDIT.
defmodule Dagger.Service do
  @moduledoc "Service"
  use Dagger.QueryBuilder
  @type t() :: %__MODULE__{}
  defstruct [:selection, :client]

  (
    @doc "Retrieves an endpoint that clients can use to reach this container.\n\nIf no port is specified, the first exposed port is used. If none exist an error is returned.\n\nIf a scheme is specified, a URL is returned. Otherwise, a host:port pair is returned.\n\nCurrently experimental; set _EXPERIMENTAL_DAGGER_SERVICES_DNS=0 to disable.\n\n\n\n## Optional Arguments\n\n* `port` - The exposed port number for the endpoint\n* `scheme` - Return a URL with the given scheme, eg. http for http://"
    @spec endpoint(t(), keyword()) :: {:ok, Dagger.String.t()} | {:error, term()}
    def endpoint(%__MODULE__{} = service, optional_args \\ []) do
      selection = select(service.selection, "endpoint")

      selection =
        if is_nil(optional_args[:port]) do
          selection
        else
          arg(selection, "port", optional_args[:port])
        end

      selection =
        if is_nil(optional_args[:scheme]) do
          selection
        else
          arg(selection, "scheme", optional_args[:scheme])
        end

      execute(selection, service.client)
    end
  )

  (
    @doc "Retrieves a hostname which can be used by clients to reach this container.\n\nCurrently experimental; set _EXPERIMENTAL_DAGGER_SERVICES_DNS=0 to disable."
    @spec hostname(t()) :: {:ok, Dagger.String.t()} | {:error, term()}
    def hostname(%__MODULE__{} = service) do
      selection = select(service.selection, "hostname")
      execute(selection, service.client)
    end
  )

  (
    @doc "A unique identifier for this service."
    @spec id(t()) :: {:ok, Dagger.ServiceID.t()} | {:error, term()}
    def id(%__MODULE__{} = service) do
      selection = select(service.selection, "id")
      execute(selection, service.client)
    end
  )

  (
    @doc "Defines a proxy to forward traffic from a host IP:Port to this service.\n\n## Required Arguments\n\n* `host_listen_address` - Host IP:Port for proxy binding. Port 0 implies any available port.\n\n## Optional Arguments\n\n* `service_port` - Service port to send traffic. Defaults to first exposed port.\n* `protocol` - Traffic protocol. Defaults to TCP."
    @spec proxy(t(), Dagger.String.t(), keyword()) :: Dagger.Service.t()
    def proxy(%__MODULE__{} = service, host_listen_address, optional_args \\ []) do
      selection = select(service.selection, "proxy")
      selection = arg(selection, "hostListenAddress", host_listen_address)

      selection =
        if is_nil(optional_args[:service_port]) do
          selection
        else
          arg(selection, "servicePort", optional_args[:service_port])
        end

      selection =
        if is_nil(optional_args[:protocol]) do
          selection
        else
          arg(selection, "protocol", optional_args[:protocol])
        end

      %Dagger.Service{selection: selection, client: service.client}
    end
  )

  (
    @doc "Start the service and wait for its health checks to succeed.\n\nServices bound to a Container do not need to be manually started."
    @spec start(t()) :: {:ok, Dagger.ServiceID.t()} | {:error, term()}
    def start(%__MODULE__{} = service) do
      selection = select(service.selection, "start")
      execute(selection, service.client)
    end
  )

  (
    @doc "Stop the service."
    @spec stop(t()) :: {:ok, Dagger.ServiceID.t()} | {:error, term()}
    def stop(%__MODULE__{} = service) do
      selection = select(service.selection, "stop")
      execute(selection, service.client)
    end
  )

  (
    @doc "Accesses a Unix socket in the service.\n\n## Required Arguments\n\n* `path` - Location of the Unix socket (e.g., \"/var/run/docker.sock\")."
    @spec unix_socket(t(), Dagger.String.t()) :: Dagger.Socket.t()
    def unix_socket(%__MODULE__{} = service, path) do
      selection = select(service.selection, "unixSocket")
      selection = arg(selection, "path", path)
      %Dagger.Socket{selection: selection, client: service.client}
    end
  )
end
