extend type Query {
  "Queries the host environment."
  host: Host!
}

"Information about the host execution environment."
type Host {
  """
  Accesses a directory on the host.
  """
  directory(
    """
    Location of the directory to access (e.g., ".").
    """
    path: String!,

    """
    Exclude artifacts that match the given pattern (e.g., ["node_modules/", ".git*"]).
    """
    exclude: [String!],

    """
    Include only artifacts that match the given pattern (e.g., ["app/", "package.*"]).
    """
    include: [String!]
  ): Directory!

  """
  Accesses a file on the host.
  """
  file(
    """
    Location of the file to retrieve (e.g., "README.md").
    """
    path: String!
  ): File!

  """
  Accesses a Unix socket on the host.
  """
  unixSocket(
    """
    Location of the Unix socket (e.g., "/var/run/docker.sock").
    """
    path: String!
  ): Socket!

  """
  Creates a tunnel that forwards traffic from the host to a service.
  """
  tunnel(
    "Service to send traffic from the tunnel."
    service: ServiceID!

    """
    Port forwarding rules to configure for the tunnel.

    If the frontend port is not specified, a random port will be allocated on
    the host.

    If no forwards and no offset are specified, all exposed ports are forwarded
    as if they were listed with no frontend (i.e. a random host-side port will
    be chosen).
    """
    ports: [PortForward!]

    """
    Optional offset to configure for frontend ports, relative to their
    corresponding backend port.

    Port forwarding rules take precedence.
    """
    offset: Int
  ): Service!

  """
  Creates a service that forwards traffic to a specified address via the host.
  """
  service(
    """
    Ports to expose via the service, forwarding through the host network.

    If the frontend port is not specified, it defaults to the same as the
    backend port.

    An empty set of ports is not valid; an error will be
    returned.
    """
    ports: [PortForward!]!

    "Upstream host to forward traffic to."
    host: String = "localhost"
  ): Service!

  """
  Sets a secret given a user-defined name and the file path on the host, and returns the secret.
  The file is limited to a size of 512000 bytes.
  """
  setSecretFile(
    """
    The user defined name for this secret.
    """
    name: String!

    """
    Location of the file to set as a secret.
    """
    path: String!
  ): Secret!
}

"Port forwarding rules for tunneling network traffic."
input PortForward {
  """
  Port to expose to clients. If unspecified, a default will be chosen.
  """
  frontend: Int

  "Destination port for traffic."
  backend: Int!

  "Protocol to use for traffic."
  protocol: NetworkProtocol = TCP
}
